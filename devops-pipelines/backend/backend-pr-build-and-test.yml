name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - backend/*

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.x'
  testResultsDirectory: '$(Agent.TempDirectory)/TestResults'
  coverageReportsDirectory: '$(Agent.TempDirectory)/CoverageReports'

pool: 'LACC PreProd Pool'

stages:
  - stage: Build_And_Test_Backend
    displayName: 'LACC Backend - Build, Test & Package'
    jobs:
      - job: Package_NuGet
        displayName: 'Pack and Publish NuGet Package'
        steps:
          - checkout: self
            sparseCheckoutDirectories: backend devops-pipelines/templates

          - template: ../templates/dotnet-build-steps.yml
            parameters:
              projectPath: 'backend/CPS.ComplexCases.API.HttpTelemetry/CPS.ComplexCases.API.HttpTelemetry.csproj'
              projectName: 'HttpTelemetry'
              buildConfiguration: $(buildConfiguration)
              dotNetVersion: $(dotNetVersion)
              useLocalNuGet: false
              publishOutput: false
              runTests: false

          - script: |
              mkdir -p $(Build.SourcesDirectory)/localnuget
              rm -f $(Build.SourcesDirectory)/localnuget/*.nupkg
            displayName: 'Prepare local NuGet directory'

          - task: DotNetCoreCLI@2
            displayName: 'Pack HttpTelemetry'
            inputs:
              command: 'pack'
              packagesToPack: 'backend/CPS.ComplexCases.API.HttpTelemetry/CPS.ComplexCases.API.HttpTelemetry.csproj'
              configuration: 'Release'
              versioningScheme: 'byBuildNumber'

          - task: DotNetCoreCLI@2
            displayName: 'Push HttpTelemetry package'
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              publishVstsFeed: 'Information Management/LACC-backend'
          
          - template: ../templates/runner-cleanup-steps.yml
            parameters:
              buildArtifact: $(Build.ArtifactStagingDirectory)

      # - job: Build_And_Test_Solution
      #   displayName: 'Build & Test Solution'
      #   dependsOn: Package_NuGet
      #   steps:
      #     - template: ../templates/dotnet-build-steps.yml
      #       parameters:
      #         projectPath: 'backend/CPS.ComplexCases.sln'
      #         projectName: 'Backend Solution'
      #         buildConfiguration: '$(buildConfiguration)'
      #         dotNetVersion: $(dotNetVersion)
      #         useLocalNuGet: true
      #         publishOutput: false
      #         runTests: true
      #         testResultsDirectory: $(testResultsDirectory)
      #         coverageReportsDirectory: $(coverageReportsDirectory)

      #     # Generate coverage report
      #     - template: ../templates/dotnet-code-coverage-steps.yml
      #       parameters:
      #         coverageReportsDirectory: $(coverageReportsDirectory)
      #         projectName: 'Backend'

      # - job: Build_Main_API
      #   displayName: 'LACC - Build Main API'
      #   dependsOn: Build_And_Test_Solution
      #   pool:
      #     vmImage: ubuntu-latest
      #   steps:
      #     # Build and publish Main API
      #     - template: ../templates/dotnet-build-steps.yml
      #       parameters:
      #         projectPath: 'backend/CPS.ComplexCases.API/CPS.ComplexCases.API.csproj'
      #         projectName: 'lacc-main-api-drop'
      #         buildConfiguration: $(buildConfiguration)
      #         dotNetVersion: $(dotNetVersion)
      #         useLocalNuGet: true
      #         publishOutput: true
      #         runTests: false

      # - job: Build_FileTransfer_API
      #   displayName: 'LACC - Build FileTransfer API'
      #   dependsOn: Build_And_Test_Solution
      #   pool:
      #     vmImage: ubuntu-latest
      #   steps:
      #     # Build and publish FileTransfer API
      #     - template: ../templates/dotnet-build-steps.yml
      #       parameters:
      #         projectPath: 'backend/CPS.ComplexCases.FileTransfer.API/CPS.ComplexCases.FileTransfer.API.csproj'
      #         projectName: 'lacc-filetransfer-api-drop'
      #         buildConfiguration: $(buildConfiguration)
      #         dotNetVersion: $(dotNetVersion)
      #         useLocalNuGet: true
      #         publishOutput: true
      #         runTests: false

      - job: Package_Database_Scripts
        displayName: 'LACC - Package Database Migration Scripts'
        # dependsOn: Build_And_Test_Solution
        pool:
          vmImage: ubuntu-latest
        variables:
          system.debug: 'true'
        steps:
          # # Build Data project with dependencies
          # - template: ../templates/dotnet-build-steps.yml
          #   parameters:
          #     projectPath: 'backend/CPS.ComplexCases.Data/CPS.ComplexCases.Data.csproj'
          #     projectName: 'Database'
          #     buildConfiguration: $(buildConfiguration)
          #     dotNetVersion: $(dotNetVersion)
          #     useLocalNuGet: true
          #     publishOutput: false
          #     runTests: false

          # - task: DotNetCoreCLI@2
          #   displayName: 'Install EF Core Tools'
          #   inputs:
          #     command: 'custom'
          #     custom: 'tool'
          #     arguments: 'install --global dotnet-ef'
          
          # - task: DotNetCoreCLI@2
          #   displayName: 'Generate Migration Scripts'
          #   inputs:
          #     command: 'custom'
          #     custom: 'ef'
          #     arguments: 'migrations script --idempotent --output $(Build.ArtifactStagingDirectory)/migration-script.sql --project backend/CPS.ComplexCases.Data/CPS.ComplexCases.Data.csproj --startup-project backend/CPS.ComplexCases.API/CPS.ComplexCases.API.csproj'
          
          - task: CmdLine@2
            displayName: 'Dotnet Install'
            inputs:
              script: |     
                if ! command -v dotnet &> /dev/null; then
                  echo ".NET is not installed."
                  echo "Installing .NET SDK..."
                  wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
                  sudo dpkg -i packages-microsoft-prod.deb
                  sudo apt-get update
                  sudo apt-get install -y dotnet-sdk-8.0
                  sudo apt-get install -y aspnetcore-runtime-8.0
                  sudo apt-get install -y dotnet-runtime-8.0
                else
                  echo ".NET is already installed."
                fi 

          - task: NuGetToolInstaller@1
            name: 'NuGetToolInstaller'
            displayName: 'NuGet tool installer'

          - task: NuGetAuthenticate@1
            displayName: 'NuGet Authenticate'

          # Restore packages
          - task: DotNetCoreCLI@2
            displayName: 'Restore Database'
            inputs:
              command: 'restore'
              projects: 'backend/CPS.ComplexCases.Data/CPS.ComplexCases.Data.csproj'
              feedsToUse: 'select'
              vstsFeed: 'Information Management/LACC-backend'

          - task: Bash@3
            displayName: 'Generate Migration Scripts'
            inputs:
              targetType: 'inline'
              script: |
                export PATH="$PATH:$HOME/.dotnet/tools"
                
                if ! dotnet ef --version &> /dev/null; then
                  dotnet tool install --global dotnet-ef
                fi

                dotnet build backend/CPS.ComplexCases.Data/CPS.ComplexCases.Data.csproj --configuration $(buildConfiguration) --no-restore

                dotnet ef migrations script \
                --idempotent \
                --output $(Build.ArtifactStagingDirectory)/migration-script.sql \
                --project backend/CPS.ComplexCases.Data/CPS.ComplexCases.Data.csproj \
                --startup-project backend/CPS.ComplexCases.API/CPS.ComplexCases.API.csproj

          - task: CopyFiles@2
            displayName: 'Copy Migration Files'
            inputs:
              sourceFolder: 'backend/CPS.ComplexCases.Data/Migrations'
              contents: '**'
              targetFolder: '$(Build.ArtifactStagingDirectory)/migrations'

          - task: ArchiveFiles@2
            displayName: 'Archive Database Scripts'
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/database-scripts.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Database Scripts'
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)/database-scripts.zip'
              artifactName: 'database-scripts-drop'
