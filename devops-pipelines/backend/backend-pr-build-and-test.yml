trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - backend/*

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.x'
  testResultsDirectory: '$(Agent.TempDirectory)/TestResults'
  coverageReportsDirectory: '$(Agent.TempDirectory)/CoverageReports'

pool: 'LACC PreProd Pool'

stages:
  - stage: Build_And_Test_Backend
    displayName: 'LACC Backend - Build, Test & Package'
    jobs:
      - job: Package_NuGet
        displayName: 'Pack and Publish NuGet Package'
        steps:
          - template: ../templates/dotnet-build-steps.yml
            parameters:
              projectPath: 'backend/CPS.ComplexCases.API.HttpTelemetry/CPS.ComplexCases.API.HttpTelemetry.csproj'
              projectName: 'HttpTelemetry'
              buildConfiguration: $(buildConfiguration)
              dotNetVersion: $(dotNetVersion)
              useLocalNuGet: false
              publishOutput: false
              runTests: false

          - script: |
              mkdir -p $(Build.SourcesDirectory)/localnuget
              rm -f $(Build.SourcesDirectory)/localnuget/*.nupkg
            displayName: 'Prepare local NuGet directory'

          - task: DotNetCoreCLI@2
            displayName: 'Pack HttpTelemetry'
            inputs:
              command: 'pack'
              packagesToPack: 'backend/CPS.ComplexCases.API.HttpTelemetry/CPS.ComplexCases.API.HttpTelemetry.csproj'
              outputDir: '$(Build.SourcesDirectory)/localnuget'
              arguments: '--configuration $(buildConfiguration) --no-build'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish HttpTelemetry Package'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/localnuget'
              artifact: 'localnuget'

      - job: Build_And_Test_Solution
        displayName: 'Build & Test Solution'
        dependsOn: Package_NuGet
        steps:
          - template: ../templates/dotnet-build-steps.yml
            parameters:
              projectPath: 'backend/CPS.ComplexCases.sln'
              projectName: 'Backend Solution'
              buildConfiguration: '$(buildConfiguration)'
              dotNetVersion: $(dotNetVersion)
              useLocalNuGet: true
              publishOutput: false
              runTests: true
              testResultsDirectory: $(testResultsDirectory)
              coverageReportsDirectory: $(coverageReportsDirectory)

      - job: Build_Main_API
        displayName: 'LACC - Build Main API'
        dependsOn: Build_And_Test_Solution
        steps:
          # Build and publish Main API
          - template: ../templates/dotnet-build-steps.yml
            parameters:
              projectPath: 'backend/CPS.ComplexCases.API/CPS.ComplexCases.API.csproj'
              projectName: 'lacc-main-api-drop'
              buildConfiguration: $(buildConfiguration)
              dotNetVersion: $(dotNetVersion)
              useLocalNuGet: true
              publishOutput: true
              runTests: false

      - job: Build_FileTransfer_API
        displayName: 'LACC - Build FileTransfer API'
        dependsOn: Build_And_Test_Solution
        steps:
          # Build and publish FileTransfer API
          - template: ../templates/dotnet-build-steps.yml
            parameters:
              projectPath: 'backend/CPS.ComplexCases.FileTransfer.API/CPS.ComplexCases.FileTransfer.API.csproj'
              projectName: 'lacc-filetransfer-api-drop'
              buildConfiguration: $(buildConfiguration)
              dotNetVersion: $(dotNetVersion)
              useLocalNuGet: true
              publishOutput: true
              runTests: false

      - job: Package_Database_Scripts
        displayName: 'LACC - Package Database Migration Scripts'
        dependsOn: Build_And_Test_Solution
        steps:
          # Build Data project with dependencies
          - template: ../templates/dotnet-build-steps.yml
            parameters:
              projectPath: 'backend/CPS.ComplexCases.Data/CPS.ComplexCases.Data.csproj'
              projectName: 'Database'
              buildConfiguration: $(buildConfiguration)
              dotNetVersion: $(dotNetVersion)
              useLocalNuGet: true
              publishOutput: false
              runTests: false

          - task: Bash@3
            displayName: 'Generate Migration Scripts'
            inputs:
              targetType: 'inline'
              script: |
                export PATH="$PATH:$HOME/.dotnet/tools"
                
                if ! dotnet ef --version &> /dev/null; then
                  dotnet tool install --global dotnet-ef
                fi

                dotnet ef migrations script \
                --idempotent \
                --output $(Build.ArtifactStagingDirectory)/migration-script.sql \
                --project backend/CPS.ComplexCases.Data/CPS.ComplexCases.Data.csproj \
                --startup-project backend/CPS.ComplexCases.API/CPS.ComplexCases.API.csproj

