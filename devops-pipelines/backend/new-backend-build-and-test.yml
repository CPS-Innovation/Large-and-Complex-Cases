trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - backend/*

variables:
  buildConfiguration: 'Release'
  solution: 'backend/CPS.ComplexCases.sln'
  project: 'backend/CPS.ComplexCases.FileTransfer.API/CPS.ComplexCases.FileTransfer.API.csproj'
  buildAgentPool: 'LACC PreProd Pool'
 
stages:
- stage: Build
  jobs:
  - job: Build
    pool: 
      name: $(buildAgentPool)
    steps:
    - task: CmdLine@2
      displayName: 'Dotnet Install'
      inputs:
        script: |     
          if ! command -v dotnet &> /dev/null; then
            echo ".NET is not installed."
            echo "Installing .NET SDK..."
            sudo apt-get update
            sudo apt-get install -y dotnet-sdk-8.0
            sudo apt-get install -y aspnetcore-runtime-8.0
            sudo apt-get install -y dotnet-runtime-8.0
          else
            echo ".NET is already installed."
          fi 

    - task: NuGetToolInstaller@1
      name: 'NuGetToolInstaller'
      displayName: 'NuGet tool installer'

    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
    
    - script: |
        dotnet restore $(solution) --configfile nuget.config
      displayName: 'DotNet restore packages'

    - task: DotNetCoreCLI@2
      displayName: Building solution
      inputs:
        command: 'build'
        projects: '$(project)'
        arguments: '--configuration debug'

    - task: DotNetCoreCLI@2
      displayName: Run tests
      inputs:
        command: test
        projects: '$(project)'
        arguments: '--configuration debug'

####### Uncomment when integration tests available #######
    # - task: DotNetCoreCLI@2
    #   displayName: Run integration tests
    #   inputs:
    #     command: test
    #     projects: '$(integrationTestProject)'
    #     arguments: '--configuration debug'
    
    - task: DotNetCoreCLI@2
      name: 'Publish'
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(project)'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/Output'
        zipAfterPublish: false
    
#     - task: PublishBuildArtifacts@1
#       name: 'PublishBuildArtifacts'
#       displayName: 'Publish build artifacts'
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: '$(buildArtifact)'
#         publishLocation: 'Container'