parameters:
  - name: environment
    displayName: 'Target Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - stage
      - prod
  - name: deployToSlot
    type: boolean
    default: false
    values:
      - false
      - true

resources:
  pipelines:
  - pipeline: build
    source: 'LACC-UI-dev-build'
    trigger: 
      branches:
        include:
         - main

variables:
  - name: slotName
    value: ''
  - name: resourceGroupName
    value: 'rg-lacc-${{ parameters.environment }}'
  - name: webAppName
    value: 'lacc-app-ui-spa-${{ parameters.environment }}'
  - name: azureSubscription
    ${{ if ne(parameters.environment, 'prod') }}:
      value: 'Azure Pipeline: Large and Complex Cases - Pre-Prod'
    ${{ else }}:
      value: 'Azure Pipeline: Large and Complex Cases - Prod'

stages:
  - stage: Deploy_${{ parameters.environment }}
    displayName: 'Deploy to ${{ parameters.environment }}'
    pool:
      name: 'LACC PreProd Pool'
    jobs:
      - deployment: Deploy_UI
        displayName: 'LACC - Deploy UI SPA'
        environment: 'LACC-UI-${{ parameters.environment }}'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: $(azureSubscription)
                    resourceGroupName: $(resourceGroupName)
                    appType: 'webAppLinux'
                    WebAppName: '$(webAppName)'
                    deployToSlotOrASE: ${{ parameters.deployToSlot }}
                    slotName: $(slotName)
                    packageForLinux: '$(Pipeline.Workspace)/build/lacc-ui-${{ parameters.environment }}-drop'
                    RuntimeStack: 'NODE|20-lts'
                    StartupCommand: 'pm2 serve /home/site/wwwroot/ --no-daemon --spa'   
                  displayName: 'Deploy LACC UI to ${{ parameters.environment }}'

                - checkout: self
                  sparseCheckoutDirectories: devops-pipelines/scripts
                  fetchDepth: 1

                - task: Bash@3
                  displayName: 'Ensure Azure CLI'
                  inputs:
                    targetType: 'inline'
                    script: |
                      echo "Checking if Azure CLI is installed..."
                      
                      # Check if az command exists
                      if command -v az &> /dev/null; then
                        echo "Azure CLI is already installed"
                        az --version
                        exit 0
                      fi

                      echo "Azure CLI not found, installing..."
                      bash '$(System.DefaultWorkingDirectory)/devops-pipelines/scripts/installAzureCli.sh'

                - task: AzureCLI@2
                  displayName: 'Verify Function App Deployment'
                  inputs:
                    azureSubscription: $(azureSubscription)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      bash '$(System.DefaultWorkingDirectory)/devops-pipelines/scripts/verifyDeployment.sh'
                  env:
                    APP_TYPE: webapp
                    APP_NAME: $(webAppName)
                    RG: $(resourceGroupName)
                    USE_SLOT: ${{ lower(parameters.deployToSlot) }}}
                    SLOT_NAME: $(slotName)

# TODO: add step to run E2E tests on the live app / slot before swap
                
                - template: ../templates/runner-cleanup.yml
                  parameters:
                    buildArtifactDir: 'build'