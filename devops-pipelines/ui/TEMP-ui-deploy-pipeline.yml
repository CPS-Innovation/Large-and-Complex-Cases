# Deploy the LACC UI React app to an Azure App Service instance
# Uses the pre-installed 'PM2' app that comes with Node on Azure
trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - ui-spa/*

pr: none

parameters:
  - name: environment
    displayName: 'Target Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - stage
      - prod

variables:
  - name: resourceGroupName
    value: 'rg-lacc-${{ parameters.environment }}'
  - name: appName
    value: 'lacc-app-ui-spa-${{ parameters.environment }}'
  - name: buildArtifact
    value: 'lacc-ui-${{ parameters.environment }}-drop'
  - name: build-agent
    value: 'LaCC Pre-Prod Build Agents'
  - name: azureSubscription
    ${{ if ne(parameters.environment, 'prod') }}:
      value: 'Azure Pipeline: Large and Complex Cases - Pre-Prod'
    ${{ else }}:
      value: 'Azure Pipeline: Large and Complex Cases - Prod'

stages:
  - stage: Deploy_${{ parameters.environment }}
    displayName: 'Deploy to ${{ parameters.environment }}'
    pool:
      name: $(build-agent)
    jobs:
      - job: CI_Deploy_LACCUI_${{ parameters.environment }}
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download UI Build Artifact'
            inputs:
              buildType: 'specific'
              project: '$(System.TeamProjectId)'
              pipeline: 'LACC-UI-dev-build-and-test'
              buildVersionToDownload: 'latest'
              artifactName: '$(buildArtifact)'
              downloadPath: '$(Pipeline.Workspace)'

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(resourceGroupName)
              appType: 'webAppLinux'
              WebAppName: '$(appName)'
              packageForLinux: '$(Pipeline.Workspace)/$(buildArtifact)/*.zip'
              RuntimeStack: 'NODE|20-lts'
              StartupCommand: 'pm2 serve /home/site/wwwroot/ --no-daemon --spa'
              
            displayName: 'Deploy LACC UI to ${{ parameters.environment }}'
            retryCountOnTaskFailure: 1 

<<<<<<< HEAD
          - script: |
              echo "Cleaning up downloaded artifacts..."

              if ! rm -r "$(buildArtifact)" 2>err.log; then
                cat err.log >&2
                exit 1
              else
                echo "Downloaded artifact removed successfully."
              fi
            workingDirectory: $(Pipeline.Workspace)
=======

          # - script: |
          #     set -e
          #     echo "Installing Playwright browsers..."
          #     npx playwright install --with-deps

          #     echo "Building app in Playwright mode..."
          #     npx vite build --mode playwright

          #     echo "Running Playwright E2E tests with real-time output..."
          #     npx playwright test --reporter=list,html,junit --output=playwright/test-results --workers=1

          #     echo "E2E tests completed. Reports:"
          #     ls -l playwright/test-results
          #   displayName: 'Run E2E Tests (Playwright, Bash)'
          #   workingDirectory: ui-spa
          #   continueOnError: true
          #   condition: eq('${{ parameters.runE2E }}', true)

          # - task: PublishTestResults@2
          #   displayName: 'Publish E2E Test Results'
          #   inputs:
          #     testResultsFormat: 'JUnit'
          #     testResultsFiles: 'ui-spa/playwright/test-results/junit.xml'
          #     publishRunAttachments: true
          #   condition: and(always(), eq('${{ parameters.runE2E }}', true))

          # - task: PublishBuildArtifacts@1
          #   displayName: 'Publish E2E Test Report'
          #   inputs:
          #     pathtoPublish: 'ui-spa/playwright/playwright-report'
          #     artifactName: 'e2e-test-report'
          #   condition: and(always(), eq('${{ parameters.runE2E }}', true))
>>>>>>> b887aff (add ui build and publish pipeline, update backend deployment stage dependencies)
