parameters:
  projectPath: ''
  projectName: ''
  buildConfiguration: 'Release'
  useLocalNuGet: false
  nugetArtifact: 'localnuget'
  nugetArtifactDownloadPath: '$(Build.SourcesDirectory)/localnuget'
  publishOutput: false
  runTests: false
  testResultsDirectory: ''
  coverageReportsDirectory: ''

steps:
  - task: CmdLine@2
    displayName: 'Dotnet Install'
    inputs:
      script: |     
        if ! command -v dotnet &> /dev/null; then
          echo ".NET is not installed."
          echo "Installing .NET SDK..."
          wget https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-8.0
          sudo apt-get install -y aspnetcore-runtime-8.0
          sudo apt-get install -y dotnet-runtime-8.0
        else
          echo ".NET is already installed."
        fi 

  - task: NuGetToolInstaller@1
    name: 'NuGetToolInstaller'
    displayName: 'NuGet tool installer'

  - task: NuGetAuthenticate@1
    displayName: 'NuGet Authenticate'

  # # Download local NuGet package if needed
  # - ${{ if eq(parameters.useLocalNuGet, true) }}:
  #   - task: DownloadPipelineArtifact@2
  #     displayName: 'Download Local NuGet Package'
  #     inputs:
  #       buildType: 'current'
  #       artifact: '${{ parameters.nugetArtifact }}'
  #       path: '${{ parameters.nugetArtifactDownloadPath }}'

  #   - task: Bash@3
  #     displayName: 'Create NuGet.Config'
  #     inputs:
  #       targetType: 'inline'
  #       script: |
  #         cat <<EOF > "$(Build.SourcesDirectory)/NuGet.Config"
  #         <?xml version="1.0" encoding="utf-8"?>
  #         <configuration>
  #           <packageSources>
  #             <clear />
  #             <add key="local-packages" value="${{ parameters.nugetArtifactDownloadPath }}" />
  #             <add key="LACC-backend" value="https://pkgs.dev.azure.com/CPSDTS/b22de6aa-9da5-4bf2-afb5-c15f5f9cb3bf/_packaging/LACC-backend/nuget/v3/index.json" />
  #           </packageSources>
  #           <packageSourceMapping>
  #             <packageSource key="local-packages">
  #               <package pattern="CPS.ComplexCases.*" />
  #             </packageSource>
  #                 <packageSource key="cps-fct-feed">
  #               <package pattern="microsoft.extensions.*" />
  #             </packageSource>
  #             <packageSource key="nuget.org">
  #               <package pattern="*" />
  #             </packageSource>
  #           </packageSourceMapping>
  #           <config>
  #             <add key="globalPackagesFolder" value="$(Build.SourcesDirectory)/packages" />
  #           </config>
  #           <packageRestore>
  #             <add key="enabled" value="True" />
  #             <add key="automatic" value="True" />
  #           </packageRestore>
  #         </configuration>
  #         EOF

  # Restore packages
  - task: DotNetCoreCLI@2
    displayName: 'Restore ${{ parameters.projectName }}'
    inputs:
      command: 'restore'
      projects: '${{ parameters.projectPath }}'
      feedsToUse: 'select'
      vstsFeed: 'Information Management/LACC-backend'
      # ${{ if eq(parameters.useLocalNuGet, true) }}:
      # nugetConfigPath: '$(Build.SourcesDirectory)/NuGet.Config'
      # feedsToUse: 'config'

  # Build project
  - task: DotNetCoreCLI@2
    displayName: 'Build ${{ parameters.projectName }}'
    inputs:
      command: 'build'
      projects: '${{ parameters.projectPath }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'

  # Run tests if enabled
  - ${{ if eq(parameters.runTests, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '${{ parameters.projectPath }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --no-build --collect:"XPlat Code Coverage;Format=cobertura" --settings backend/CodeCoverage.runsettings'
        publishTestResults: true
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        testRunTitle: '${{ parameters.projectName }} Tests'
        workingDirectory: '$(Build.SourcesDirectory)'
        resultsDirectory: '${{ parameters.testResultsDirectory }}'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        failIfCoverageEmpty: true
      condition: succeededOrFailed()

    # Generate detailed HTML coverage report
    - template: dotnet-code-coverage-steps.yml
      parameters:
        coverageReportsDirectory: ${{ parameters.coverageReportsDirectory }}
        projectName: ${{ parameters.projectName }}

  # Publish if enabled
  - ${{ if eq(parameters.publishOutput, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Publish ${{ parameters.projectName }}'
      inputs:
        command: 'publish'
        projects: '${{ parameters.projectPath }}'
        publishWebProjects: false
        arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/${{ parameters.projectName }} --no-restore --self-contained false /p:PublishReadyToRun=false /p:SourceRevisionId=$(Build.SourceVersion)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish ${{ parameters.projectName }} Artifact'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.projectName }}'
        artifactName: '${{ parameters.projectName }}' 