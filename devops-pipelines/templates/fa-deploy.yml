parameters:
  environment: ''
  functionAppName: ''
  buildArtifactName: ''
  pipelineResourceAlias: ''
  keyVaultName: $(keyVaultName)
  azureSubscription: $(azureSubscription)
  resourceGroupName: $(resourceGroupName)
  deployToSlot: true
  slotName: ''

steps:
  - download: '${{ parameters.pipelineResourceAlias}}'
    artifact: '${{ parameters.buildArtifactName }}'

  - template: ../templates/fa-config.yml
    parameters:
      environment: ${{ parameters.environment }}
      functionAppName: ${{ parameters.functionAppName }}
      azureSubscription: ${{ parameters.azureSubscription }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      keyVaultName: ${{ parameters.keyVaultName }}
      slotName: ${{ parameters.slotName }}

  - task: AzureFunctionApp@2
    displayName: 'Deploy Package to Azure Function App'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      appType: 'functionApp'
      appName: ${{ parameters.functionAppName }}
      package: '$(Pipeline.Workspace)/${{ parameters.pipelineResourceAlias}}/${{ parameters.buildArtifactName }}/*.zip'
      runtimeStack: 'DOTNET-ISOLATED|8.0'
      deploymentMethod: 'runFromPackage'
      deployToSlotOrASE: ${{ parameters.deployToSlot }}
      slotName: ${{ parameters.slotName }}
      resourceGroupName: ${{ parameters.resourceGroupName }}

  - checkout: self
    sparseCheckoutDirectories: devops-pipelines/scripts
    fetchDepth: 1

  - task: Bash@3
    displayName: 'Ensure Azure CLI'
    inputs:
      targetType: 'inline'
      script: |
        echo "Checking if Azure CLI is installed..."
        
        # Check if az command exists
        if command -v az &> /dev/null; then
          echo "Azure CLI is already installed"
          az --version
          exit 0
        fi

        echo "Azure CLI not found, installing..."
        bash '$(System.DefaultWorkingDirectory)/devops-pipelines/scripts/installAzureCli.sh'

  - task: AzureCLI@2
    displayName: 'Verify Function App Deployment'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        DEPLOYMENT_STATE_CMD="az functionapp log deployment list --name ${{ parameters.functionAppName }} --resource-group ${{ parameters.resourceGroupName }} --query "[0].provisioningState" -o tsv"
        APP_STATE_CMD="az functionapp show --name ${{ parameters.functionAppName }} --resource-group ${{ parameters.resourceGroupName }} --query "state" -o tsv"

        if [ "$USE_SLOT" = "true" ]; then
          DEPLOYMENT_STATE_CMD+=" --slot ${{ parameters.slotName }}"
          APP_STATE_CMD+=" --slot ${{ parameters.slotName }}"
          echo "Verifying deployment to ${{ parameters.functionAppName }}/${{ parameters.slotName }}..."
        else
          echo "Verifying deployment to ${{ parameters.functionAppName }}..."
        fi

        # Check if deployment completed successfully
        DEPLOYMENT_STATE=$(eval "$DEPLOYMENT_STATE_CMD" 2>&1)
        EXIT_CODE=$?

        if [ $EXIT_CODE -ne 0 ]; then
          echo "$DEPLOYMENT_STATE"
          exit 1
        fi

        echo "Latest deployment status: "$DEPLOYMENT_STATE""
        
        # Wait a moment for extraction to complete
        echo "Waiting for deployment to stabilize..."
        sleep 10
        
        # Check if function app is running
        APP_STATE=$(eval "$APP_STATE_CMD" 2>&1)
        EXIT_CODE=$?

        if [ $EXIT_CODE -ne 0 ]; then
          echo "$APP_STATE"
          exit 1
        fi

        echo "Function app state: "$APP_STATE""
        
        if [ "$APP_STATE" != "Running" ]; then
          echo "##vso[task.logissue type=warning]⚠️ Function app is not in Running state."
        else
          echo "✅ Function app is running."
        fi
    env:
      USE_SLOT: ${{ lower(parameters.deployToSlot) }}