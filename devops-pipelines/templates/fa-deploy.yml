parameters:
  environment: ''
  functionAppName: ''
  buildArtifactName: ''
  pipelineResourceAlias: ''
  keyVaultName: $(keyVaultName)
  azureSubscription: $(azureSubscription)
  resourceGroupName: $(resourceGroupName)
  deployToSlot: true
  slotName: ''

steps:
  - download: '${{ parameters.pipelineResourceAlias}}'
    artifact: '${{ parameters.buildArtifactName }}'

  - template: ../templates/fa-config.yml
    parameters:
      environment: ${{ parameters.environment }}
      functionAppName: ${{ parameters.functionAppName }}
      azureSubscription: ${{ parameters.azureSubscription }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      keyVaultName: ${{ parameters.keyVaultName }}
      slotName: ${{ parameters.slotName }}

  - task: AzureFunctionApp@2
    displayName: 'Deploy Package to Azure Function App'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      appType: 'functionApp'
      appName: ${{ parameters.functionAppName }}
      package: '$(Pipeline.Workspace)/${{ parameters.pipelineResourceAlias}}/${{ parameters.buildArtifactName }}/*.zip'
      runtimeStack: 'DOTNET-ISOLATED|8.0'
      deploymentMethod: 'runFromPackage'
      deployToSlotOrASE: ${{ parameters.deployToSlot }}
      slotName: ${{ parameters.slotName }}
      resourceGroupName: ${{ parameters.resourceGroupName }}

  - checkout: self
    sparseCheckoutDirectories: devops-pipelines/scripts
    fetchDepth: 1

  - task: Bash@3
    displayName: 'Ensure Azure CLI'
    inputs:
      targetType: 'inline'
      script: |
        echo "Checking if Azure CLI is installed..."
        
        # Check if az command exists
        if command -v az &> /dev/null; then
          echo "Azure CLI is already installed"
          az --version
          exit 0
        fi

        echo "Azure CLI not found, installing..."
        bash '$(System.DefaultWorkingDirectory)/devops-pipelines/scripts/installAzureCli.sh'

  - task: AzureCLI@2
    displayName: 'Verify Function App Deployment'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        APP_STATE_CMD="az functionapp show --name ${{ parameters.functionAppName }} --resource-group ${{ parameters.resourceGroupName }} --query "state" -o tsv"

        if [ "$USE_SLOT" = "true" ]; then
          APP_STATE_CMD+=" --slot ${{ parameters.slotName }}"
          INSTANCE_NAME="${{ parameters.functionAppName }}-${{ parameters.slotName }}"
        else
          INSTANCE_NAME="${{ parameters.functionAppName }}"
        fi

        check_function_app_state() {
          local max_retries=3
          local attempt=1
          local sleep=5

          while [ $attempt -le $max_retries ]; do
            echo "Attempt $attempt/$max_retries: Waiting $sleep seconds for the deployment to stabilize..."
            sleep $sleep

            echo "Running "$APP_STATE_CMD""
            APP_STATE=$(eval "$APP_STATE_CMD" 2>&1)
            EXIT_CODE=$?

            if [ $EXIT_CODE -ne 0 ]; then
              echo "##[error]❌ The command failed. $APP_STATE"
              exit 1
            fi

            echo "Function app state: $APP_STATE"

            if [ "$APP_STATE" == "Running" ]; then
              echo "✅ Function app is in a Running state."
              return 0
            else
              echo "##vso[task.logissue type=warning]⚠️ Function app is not in Running state."
            fi

            attempt=$((attempt + 1))
            sleep=$((sleep + 5))
          done

          echo "❌ Function app did not reach 'Running' state after $max_retries attempts."
          exit 1
        }

        echo "Verifying deployment to $INSTANCE_NAME..."
        check_function_app_state

        # Curl the app's Health API endpoint
        echo "CURLing the live instance's Health API endpoint..."
        HTTP_CODE=$(curl -X GET -s -o /dev/null -I -w "%{http_code}" "https://"$INSTANCE_NAME".azurewebsites.net/api/status")
        
        if [ "$HTTP_CODE" != "200"]; then
          echo "##[error]The endpoint did not return a 200 response."
          echo "##[error]The HTTP code recieved was: "$HTTP_CODE"."
          echo "##vso[task.logissue type=error]❌ The function app is not operational. A rollback may be required."
          exit 1
        fi

        echo "✅ Function app is responsive and in a healthy state."
    env:
      USE_SLOT: ${{ lower(parameters.deployToSlot) }}

  - task: AzureAppServiceManage@0
    condition: ${{ eq(parameters.deployToSlot, true) }}
    displayName: "Perform Slot Swap"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      WebAppName: ${{ parameters.functionAppName }}
      ResourceGroupName: ${{ parameters.resourceGroupName }}
      SourceSlot: ${{ parameters.slotName }}
      SwapWithProduction: true 