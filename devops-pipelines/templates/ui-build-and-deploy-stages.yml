parameters:
  - name: environment
    displayName: 'Target Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - staging
      - prod
  - name: agentPool
    type: string
    default: 'LACC PreProd Pool'
  - name: azureSubscription
    type: string
    default: 'Azure Pipeline: Large and Complex Cases - Pre-Prod'
  - name: requireValidation
    type: boolean
    default: false
  - name: notifyUsers
    type: string
    default: ''
  - name: approvers
    type: string
    default: ''

stages:
- stage: Approve_Deployment_${{ parameters.environment }}
  displayName: 'LACC ${{ parameters.environment }} - Approve Deployment'
  condition: ${{ eq(parameters.requireValidation, true) }}
  jobs:
  - template: ./manual-validation-jobs.yml
    parameters:
      instructions: 'Please verify the deployment to the lower environment worked as expected before approving deployment to ${{parameters.environment}}.'
      notifyUsers: ${{ parameters.notifyUsers }}
      approvers: ${{ parameters.approvers }}

- stage: Build_Deploy_${{ parameters.environment }}
  displayName: 'LACC UI ${{ parameters.environment }} - Build & Deploy Web App'
  ${{ if eq(parameters.requireValidation, true) }}:
    dependsOn: Approve_Deployment_${{ parameters.environment }}
  ${{ else }}:
    dependsOn: []
  variables:
    buildArtifact: 'lacc-ui-${{ parameters.environment }}-drop'
  jobs:
    - job: Build_and_Publish_Artifact
      displayName: 'Build UI SPA for the ${{ parameters.environment}} environment'
      pool: 
        vmImage: ubuntu-latest
      variables:
      - group: lacc-ui-config-${{ parameters.environment }}
      - name: nodeVersion
        value: '20.x'
      - name: workingDir
        value: ui-spa
      steps:
        - checkout: self
          sparseCheckoutDirectories: '$(workingDir)'

        - task: UseNode@1
          displayName: 'Use Node.js'
          inputs:
            version: '$(nodeVersion)'

        - task: Npm@1
          displayName: 'Install NPM Dependencies'
          inputs:
            command: 'ci'
            workingDir: '$(workingDir)'

        - task: Npm@1
          displayName: 'Build Web App Package'
          inputs:
            command: 'custom'
            customCommand: 'run build'
            workingDir: '$(workingDir)'
          env:
            VITE_GATEWAY_BASE_URL: $(VITE_GATEWAY_BASE_URL)
            VITE_GATEWAY_SCOPE: $(VITE_GATEWAY_SCOPE)
            VITE_CLIENT_ID: $(VITE_CLIENT_ID)
            VITE_TENANT_ID: $(VITE_TENANT_ID) 
            VITE_PRIVATE_BETA_USER_GROUP: $(VITE_PRIVATE_BETA_USER_GROUP)
            VITE_PRIVATE_BETA_CONTACT_EMAIL: $(VITE_PRIVATE_BETA_CONTACT_EMAIL)

        - task: PublishPipelineArtifact@1
          displayName: 'Publish Web App Package'
          inputs:
            targetPath: '$(workingDir)/dist'
            artifact: '$(buildArtifact)'

    - deployment: Deploy_UI
      displayName: 'Deploy UI SPA to the ${{ parameters.environment}} environment'
      dependsOn: Build_and_Publish_Artifact
      environment: 'LACC-UI-${{ parameters.environment }}'
      pool: ${{ parameters.agentPool }}
      variables:
        - name: resourceGroupName
          value: 'rg-lacc-${{ parameters.environment }}'
        - name: webAppName
          value: 'lacc-app-ui-spa-${{ parameters.environment }}'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: ${{ parameters.azureSubscription }}
                  resourceGroupName: $(resourceGroupName)
                  appType: 'webAppLinux'
                  WebAppName: '$(webAppName)'
                  packageForLinux: '$(Pipeline.Workspace)/$(buildArtifact)'
                  RuntimeStack: 'NODE|20-lts'
                  StartupCommand: 'pm2 serve /home/site/wwwroot/ --no-daemon --spa'   
                displayName: 'Deploy app to ${{ parameters.environment }}'

              - template: ../templates/runner-cleanup-steps.yml
                parameters:
                  buildArtifact: $(buildArtifact)