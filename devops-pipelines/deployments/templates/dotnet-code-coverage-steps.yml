parameters:
  coverageReportsDirectory: ''
  projectName: ''

steps:
  - task: DotNetCoreCLI@2
    displayName: 'Install ReportGenerator Tool'
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install --global dotnet-reportgenerator-globaltool'
    condition: always()

  - task: PowerShell@2
    displayName: 'Generate HTML Coverage Report'
    inputs:
      targetType: 'inline'
      script: |
        $coverageFiles = Get-ChildItem -Path "$(Agent.TempDirectory)" -Filter "coverage.cobertura.xml" -Recurse
        
        if ($coverageFiles.Count -gt 0) {
          $coverageFilePaths = $coverageFiles.FullName -join ";"
          
          reportgenerator `
            -reports:"$coverageFilePaths" `
            -targetdir:"${{ parameters.coverageReportsDirectory }}/html" `
            -reporttypes:"Html;HtmlSummary;Badges;TextSummary" `
            -historydir:"${{ parameters.coverageReportsDirectory }}/history" `
            -title:"${{ parameters.projectName }} Coverage Report" `
            -tag:"$(Build.BuildNumber)" `
            -assemblyfilters:"+*;-*.Tests;-*.WireMock" `
            -classfilters:"+*;-*Tests*;-*Mock*;-*Migrations*" `
            -verbosity:"Info"
        } else {
          Write-Host "No coverage files found"
        }
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish HTML Coverage Report'
    inputs:
      pathtoPublish: '${{ parameters.coverageReportsDirectory }}/html'
      artifactName: '${{ parameters.projectName }}-coverage-report'
    condition: always() 