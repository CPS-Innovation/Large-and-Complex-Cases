parameters:
  - name: environment
    displayName: 'Target Environment'
    type: string
    default: 'dev'
    values:
      - dev
      - qa
      - prod
  - name: runE2E
    displayName: 'Run E2E Tests'
    type: boolean
    default: false

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - ui-spa/*

pr:
  branches:
    include:
      - main
  paths:
    include:
      - ui-spa/*

pool:
  vmImage: ubuntu-latest

variables:
  - group: lacc-ui-config-${{ lower(parameters.environment) }}-variables
  - name: nodeVersion
    value: '20.x'
  - name: uiTestResultsDirectory
    value: '$(Agent.TempDirectory)/UITestResults'

stages:
  - stage: Build_And_Test_UI
    displayName: 'LACC UI- Build, Test & Package'
    jobs:
      - job: Build_And_Test_UI_SPA
        displayName: 'LACC - Build and Test UI SPA - ${{ Upper(parameters.environment) }}'
        steps:
          - task: NodeTool@0
            displayName: 'Use Node.js'
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: Npm@1
            displayName: 'Install UI Dependencies'
            inputs:
              command: 'ci'
              workingDir: 'ui-spa'

          - task: Npm@1
            displayName: 'Lint UI Code'
            inputs:
              command: 'custom'
              customCommand: 'run lint'
              workingDir: 'ui-spa'

          - script: |
              echo "VITE_GATEWAY_BASE_URL=$VITE_GATEWAY_BASE_URL"
              echo "VITE_GATEWAY_SCOPE=$VITE_GATEWAY_SCOPE"
              echo "VITE_CLIENT_ID=$VITE_CLIENT_ID"
              echo "VITE_TENANT_ID=$VITE_TENANT_ID"
            displayName: 'Print React env variables'

          - task: Npm@1
            displayName: 'Run UI Unit Tests'
            inputs:
              command: 'custom'
              customCommand: 'run coverage'
              workingDir: 'ui-spa'
            continueOnError: true

          - task: PublishTestResults@2
            displayName: 'Publish UI Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'ui-spa/coverage/junit.xml'
              publishRunAttachments: true
            condition: always()

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish UI Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'ui-spa/coverage/cobertura-coverage.xml'
              reportDirectory: 'ui-spa/coverage'
            condition: always()

          - task: PowerShell@2
            displayName: 'Generate Beautiful HTML Coverage Report'
            inputs:
              targetType: 'inline'
              script: |
                $ErrorActionPreference = 'Continue'
                # Navigate to UI directory
                Set-Location ui-spa
                
                if (Test-Path "coverage/cobertura-coverage.xml") {
                  Write-Host "Generating enhanced coverage report..."
                  
                  # Create enhanced HTML report directory
                  New-Item -Path "coverage/html-enhanced" -ItemType Directory -Force
                  
                  # Copy existing HTML report
                  if (Test-Path "coverage/lcov-report") {
                    Copy-Item -Path "coverage/lcov-report/*" -Destination "coverage/html-enhanced/" -Recurse -Force
                  }
                  
                  # Generate a simple coverage summary
                  if (Test-Path "coverage/coverage-summary.json") {
                    Write-Host "Processing coverage summary..."
                    $summary = Get-Content "coverage/coverage-summary.json" | ConvertFrom-Json
                    $total = $summary.total
                    
                    $buildDate = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
                    $buildNumber = if ($env:BUILD_BUILDNUMBER) { $env:BUILD_BUILDNUMBER } else { "Local" }
                    
                    # Build HTML content using string building
                    $htmlContent = "<!DOCTYPE html>"
                    $htmlContent += "<html lang='en'>"
                    $htmlContent += "<head>"
                    $htmlContent += "<meta charset='UTF-8'>"
                    $htmlContent += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>"
                    $htmlContent += "<title>CPS Complex Cases UI - Coverage Report</title>"
                    $htmlContent += "<style>"
                    $htmlContent += "body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }"
                    $htmlContent += ".header { background: #2563eb; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }"
                    $htmlContent += ".header h1 { margin: 0; font-size: 24px; }"
                    $htmlContent += ".header p { margin: 5px 0 0 0; opacity: 0.9; }"
                    $htmlContent += ".metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }"
                    $htmlContent += ".metric { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center; }"
                    $htmlContent += ".metric h3 { margin: 0 0 10px 0; color: #333; }"
                    $htmlContent += ".metric .value { font-size: 32px; font-weight: bold; margin: 10px 0; }"
                    $htmlContent += ".lines .value { color: #28a745; }"
                    $htmlContent += ".functions .value { color: #007bff; }"
                    $htmlContent += ".branches .value { color: #ffc107; }"
                    $htmlContent += ".statements .value { color: #dc3545; }"
                    $htmlContent += ".footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }"
                    $htmlContent += "</style>"
                    $htmlContent += "</head>"
                    $htmlContent += "<body>"
                    $htmlContent += "<div class='header'>"
                    $htmlContent += "<h1>ðŸŽ¯ CPS Complex Cases UI - Coverage Report</h1>"
                    $htmlContent += "<p>Generated on $buildDate | Build: $buildNumber</p>"
                    $htmlContent += "</div>"
                    $htmlContent += "<div class='metrics'>"
                    $htmlContent += "<div class='metric lines'>"
                    $htmlContent += "<h3>Lines</h3>"
                    $htmlContent += "<div class='value'>$([math]::Round($total.lines.pct))%</div>"
                    $htmlContent += "<p>$($total.lines.covered)/$($total.lines.total)</p>"
                    $htmlContent += "</div>"
                    $htmlContent += "<div class='metric functions'>"
                    $htmlContent += "<h3>Functions</h3>"
                    $htmlContent += "<div class='value'>$([math]::Round($total.functions.pct))%</div>"
                    $htmlContent += "<p>$($total.functions.covered)/$($total.functions.total)</p>"
                    $htmlContent += "</div>"
                    $htmlContent += "<div class='metric branches'>"
                    $htmlContent += "<h3>Branches</h3>"
                    $htmlContent += "<div class='value'>$([math]::Round($total.branches.pct))%</div>"
                    $htmlContent += "<p>$($total.branches.covered)/$($total.branches.total)</p>"
                    $htmlContent += "</div>"
                    $htmlContent += "<div class='metric statements'>"
                    $htmlContent += "<h3>Statements</h3>"
                    $htmlContent += "<div class='value'>$([math]::Round($total.statements.pct))%</div>"
                    $htmlContent += "<p>$($total.statements.covered)/$($total.statements.total)</p>"
                    $htmlContent += "</div>"
                    $htmlContent += "</div>"
                    $htmlContent += "<div class='footer'>"
                    $htmlContent += "<p>Generated by Vitest Coverage | Enhanced for CPS Complex Cases Project</p>"
                    $htmlContent += "</div>"
                    $htmlContent += "</body>"
                    $htmlContent += "</html>"
                    
                    $htmlContent | Out-File -FilePath "coverage/html-enhanced/enhanced-report.html" -Encoding UTF8
                    Write-Host "Enhanced HTML coverage report generated successfully"
                  }
                  
                  Write-Host "Coverage report location: ui-spa/coverage/html-enhanced"
                } else {
                  Write-Host "No coverage files found - skipping enhanced report generation"
                }
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Enhanced HTML Coverage Report'
            inputs:
              pathtoPublish: 'ui-spa/coverage/html-enhanced'
              artifactName: 'ui-coverage-report'
            condition: always()

          - task: Npm@1
            displayName: 'Build UI Application'
            inputs:
              command: 'custom'
              customCommand: 'run build'
              workingDir: 'ui-spa'
            env:
              # API Configuration
              VITE_GATEWAY_BASE_URL: $(VITE_GATEWAY_BASE_URL)
              VITE_GATEWAY_SCOPE: $(VITE_GATEWAY_SCOPE)
              VITE_CLIENT_ID: $(VITE_CLIENT_ID)
              VITE_TENANT_ID: $(VITE_TENANT_ID)
              

          - task: ArchiveFiles@2
            displayName: 'Archive UI Build'
            inputs:
              rootFolderOrFile: 'ui-spa/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/lacc-ui-spa-$(Build.BuildId).zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish UI SPA Artifact'
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)/lacc-ui-spa-$(Build.BuildId).zip'
              artifactName: 'lacc-ui-${{ parameters.environment }}-drop'

          - script: |
              set -e
              echo "Installing Playwright browsers..."
              npx playwright install --with-deps

              echo "Building app in Playwright mode..."
              npx vite build --mode playwright

              echo "Running Playwright E2E tests with real-time output..."
              npx playwright test --reporter=list,html,junit --output=playwright/test-results --workers=1

              echo "E2E tests completed. Reports:"
              ls -l playwright/test-results
            displayName: 'Run E2E Tests (Playwright, Bash)'
            workingDirectory: ui-spa
            continueOnError: true
            condition: eq('${{ parameters.runE2E }}', true)

          - task: PublishTestResults@2
            displayName: 'Publish E2E Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'ui-spa/playwright/test-results/junit.xml'
              publishRunAttachments: true
            condition: and(always(), eq('${{ parameters.runE2E }}', true))

          - task: PublishBuildArtifacts@1
            displayName: 'Publish E2E Test Report'
            inputs:
              pathtoPublish: 'ui-spa/playwright/playwright-report'
              artifactName: 'e2e-test-report'
            condition: and(always(), eq('${{ parameters.runE2E }}', true))