trigger:
  branches:
    include:
      - main
      - HA/devops-stuff
  paths:
    include:
      - ui-spa/*

pr:
  branches:
    include:
      - main
      - HA/devops-stuff
  paths:
    include:
      - ui-spa/*

pool:
  vmImage: ubuntu-latest

variables:
  nodeVersion: '20.x'
  uiTestResultsDirectory: '$(Agent.TempDirectory)/UITestResults'

stages:
  - stage: Build_And_Test_UI
    displayName: 'LACC - Build and Test UI'
    jobs:
      - job: Build_And_Test_UI_SPA
        displayName: 'LACC - Build and Test UI SPA'
        steps:
          - task: NodeTool@0
            displayName: 'Use Node.js'
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: Npm@1
            displayName: 'Install UI Dependencies'
            inputs:
              command: 'ci'
              workingDir: 'ui-spa'

          - task: Npm@1
            displayName: 'Lint UI Code'
            inputs:
              command: 'custom'
              customCommand: 'run lint'
              workingDir: 'ui-spa'

          - task: Npm@1
            displayName: 'Run UI Unit Tests'
            inputs:
              command: 'custom'
              customCommand: 'run coverage'
              workingDir: 'ui-spa'
            continueOnError: true

          - task: PublishTestResults@2
            displayName: 'Publish UI Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'ui-spa/coverage/junit.xml'
              publishRunAttachments: true
            condition: always()

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish UI Code Coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'ui-spa/coverage/cobertura-coverage.xml'
              reportDirectory: 'ui-spa/coverage'
            condition: always()

          - task: NodeTool@0
            displayName: 'Ensure Node.js for Coverage Tools'
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: Npm@1
            displayName: 'Install Coverage Report Tools'
            inputs:
              command: 'custom'
              customCommand: 'install -g nyc html-coverage-badge-generator'
            condition: always()

          - task: PowerShell@2
            displayName: 'Generate Beautiful HTML Coverage Report'
            inputs:
              targetType: 'inline'
              script: |
                # Navigate to UI directory
                Set-Location ui-spa
                
                if (Test-Path "coverage/cobertura-coverage.xml") {
                  Write-Host "Generating enhanced coverage report..."
                  
                  # Create enhanced HTML report directory
                  New-Item -Path "coverage/html-enhanced" -ItemType Directory -Force
                  
                  # Copy existing HTML report
                  if (Test-Path "coverage/lcov-report") {
                    Copy-Item -Path "coverage/lcov-report/*" -Destination "coverage/html-enhanced/" -Recurse -Force
                  }
                  
                  # Generate a simple coverage summary
                  if (Test-Path "coverage/coverage-summary.json") {
                    Write-Host "Processing coverage summary..."
                    $summary = Get-Content "coverage/coverage-summary.json" | ConvertFrom-Json
                    $total = $summary.total
                    
                    # Create a simple HTML report
                    $htmlContent = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CPS Complex Cases UI - Coverage Report</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .header { background: #2563eb; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .header h1 { margin: 0; font-size: 24px; }
        .header p { margin: 5px 0 0 0; opacity: 0.9; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
        .metric { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center; }
        .metric h3 { margin: 0 0 10px 0; color: #333; }
        .metric .value { font-size: 32px; font-weight: bold; margin: 10px 0; }
        .lines .value { color: #28a745; }
        .functions .value { color: #007bff; }
        .branches .value { color: #ffc107; }
        .statements .value { color: #dc3545; }
        .footer { text-align: center; margin-top: 20px; color: #666; font-size: 14px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸŽ¯ CPS Complex Cases UI - Coverage Report</h1>
        <p>Generated on {0} | Build: {1}</p>
    </div>
    
    <div class="metrics">
        <div class="metric lines">
            <h3>Lines</h3>
            <div class="value">{2}%</div>
            <p>{3}/{4}</p>
        </div>
        <div class="metric functions">
            <h3>Functions</h3>
            <div class="value">{5}%</div>
            <p>{6}/{7}</p>
        </div>
        <div class="metric branches">
            <h3>Branches</h3>
            <div class="value">{8}%</div>
            <p>{9}/{10}</p>
        </div>
        <div class="metric statements">
            <h3>Statements</h3>
            <div class="value">{11}%</div>
            <p>{12}/{13}</p>
        </div>
    </div>
    
    <div class="footer">
        <p>Generated by Vitest Coverage | Enhanced for CPS Complex Cases Project</p>
    </div>
</body>
</html>
"@
                    
                    $buildDate = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
                    $buildNumber = if ($env:BUILD_BUILDNUMBER) { $env:BUILD_BUILDNUMBER } else { "Local" }
                    
                    $finalHtml = $htmlContent -f $buildDate, $buildNumber, 
                      [math]::Round($total.lines.pct), $total.lines.covered, $total.lines.total,
                      [math]::Round($total.functions.pct), $total.functions.covered, $total.functions.total,
                      [math]::Round($total.branches.pct), $total.branches.covered, $total.branches.total,
                      [math]::Round($total.statements.pct), $total.statements.covered, $total.statements.total
                    
                    $finalHtml | Out-File -FilePath "coverage/html-enhanced/enhanced-report.html" -Encoding UTF8
                    Write-Host "Enhanced HTML coverage report generated successfully"
                  }
                  
                  Write-Host "Coverage report location: ui-spa/coverage/html-enhanced"
                } else {
                  Write-Host "No coverage files found - skipping enhanced report generation"
                }
            condition: always()
            errorActionPreference: 'continue'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Enhanced HTML Coverage Report'
            inputs:
              pathtoPublish: 'ui-spa/coverage/html-enhanced'
              artifactName: 'ui-coverage-report'
            condition: and(always(), exists('ui-spa/coverage/html-enhanced'))

          - task: Npm@1
            displayName: 'Build UI Application'
            inputs:
              command: 'custom'
              customCommand: 'run build'
              workingDir: 'ui-spa'

          - task: CopyFiles@2
            displayName: 'Copy web.config for Azure Web App'
            inputs:
              sourceFolder: 'ui-spa/public'
              contents: 'web.config'
              targetFolder: 'ui-spa/dist'
            condition: exists('ui-spa/public/web.config')

          - task: ArchiveFiles@2
            displayName: 'Archive UI Build'
            inputs:
              rootFolderOrFile: 'ui-spa/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/lacc-ui-spa-$(Build.BuildId).zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish UI SPA Artifact'
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)/lacc-ui-spa-$(Build.BuildId).zip'
              artifactName: 'lacc-ui-spa-drop'

          - task: Npm@1
            displayName: 'Install Playwright Browsers'
            inputs:
              command: 'custom'
              customCommand: 'exec playwright install --with-deps'
              workingDir: 'ui-spa'
            continueOnError: true

          - task: Npm@1
            displayName: 'Run E2E Tests'
            inputs:
              command: 'custom'
              customCommand: 'run ui:e2e:ci'
              workingDir: 'ui-spa'
            continueOnError: true

          - task: PublishTestResults@2
            displayName: 'Publish E2E Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'ui-spa/playwright/test-results/junit.xml'
              publishRunAttachments: true
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish E2E Test Report'
            inputs:
              pathtoPublish: 'ui-spa/playwright/playwright-report'
              artifactName: 'e2e-test-report'
            condition: always() 